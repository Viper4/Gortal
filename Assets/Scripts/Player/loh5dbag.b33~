using TMPro;
using Unity.Netcode;
using Unity.Netcode.Components;
using Unity.Services.Authentication;
using UnityEngine;

public class PlayerControl : NetworkBehaviour
{
    public static PlayerControl Instance { get; private set; }

    public InputActions inputActions;
    public string playerId;
    public bool paused = true;

    [SerializeField] private float moveSpeed = 5f;
    [SerializeField] private float jumpVelocity = 2f;

    private Transform ground;
    [HideInInspector] public bool isGrounded = false;

    [SerializeField] private float maxLeanAngle = 15f;
    [SerializeField] private float leanSpeed = 10f;

    public Transform playerModel;

    [SerializeField] private GameObject[] localOwnedObjects;

    [SerializeField] private MeshRenderer bodyRenderer;
    [SerializeField] private MeshRenderer headRenderer;

    public Gravity gravity;
    [SerializeField] private float gravityRotateSpeed = 100f;

    [SerializeField] private Vector3[] gravityDirections = new Vector3[] { Vector3.down, Vector3.up, Vector3.back, Vector3.forward, Vector3.left, Vector3.right };
    [SerializeField] private Vector3[] forwardDirections = new Vector3[] { Vector3.forward, Vector3.back, Vector3.left, Vector3.right, Vector3.up, Vector3.down };
    private int gravityIndex = 0;
    private int indexOffset = 0;
    private Vector3 forwardDirection;

    [SerializeField] private LayerMask collisionLayers;
    [SerializeField] private LayerMask hoverLayers;

    [SerializeField] private TextMeshProUGUI nameText;

    public bool switchOthersOnGravityChange = false;

    [HideInInspector] public Transform hoveredObject;

    private void OnEnable()
    {
        inputActions = new InputActions();
        inputActions.Enable();
    }

    private void OnDisable()
    {
        inputActions.Disable();
    }

    private void Start()
    {
        if (!IsOwner)
        {
            for (int i = 0; i < localOwnedObjects.Length; i++)
            {
                Destroy(localOwnedObjects[i]);
            }
            return;
        }
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);

            indexOffset = LobbyManager.Instance.joinedLobby.Players.Count - 1;
            SetGravityIndex(indexOffset % gravityDirections.Length);

            if (!IsServer)
            {
                // Request that the host sends over everyones' data to this newly spawned player
                UpdatePlayerServerRpc(LobbyManager.Instance.playerName, LobbyManager.Instance.playerNameColor, LobbyManager.Instance.playerColor, AuthenticationService.Instance.PlayerId);
                NewPlayerUpdateServerRpc();
            }
            else
            {
                UpdatePlayer(LobbyManager.Instance.playerName, LobbyManager.Instance.playerNameColor, LobbyManager.Instance.playerColor, AuthenticationService.Instance.PlayerId);
            }
        }
        else
        {
            Destroy(gameObject);
        }
    }

    private void Update()
    {
        if (!IsOwner || !IsSpawned)
            return;

        if (inputActions.UI.Menu.triggered)
        {
            if (paused)
            {
                paused = false;
                Cursor.visible = false;
            }
            else
            {
                paused = true;
                Cursor.lockState = CursorLockMode.None;
                Cursor.visible = true;
            }
        }

        Vector3 screenPosition = inputActions.UI.Point.ReadValue<Vector2>();
        Ray ray = Camera.main.ScreenPointToRay(screenPosition);
        if (Physics.Raycast(ray, out RaycastHit hoverHit, Mathf.Infinity, hoverLayers))
        {
            Debug.DrawLine(ray.origin, hoverHit.point, Color.red, 0.1f);
            hoveredObject = hoverHit.transform;
        }
        else
        {
            Debug.DrawRay(ray.origin, ray.direction, Color.green, 0.1f);
            hoveredObject = null;
        }

        if (switchOthersOnGravityChange)
        {
            if (inputActions.Player.GravitySwitch1.triggered)
            {
                SwitchGravityServerRpc(1);
            }
            else if (inputActions.Player.GravitySwitch2.triggered)
            {
                SwitchGravityServerRpc(-1);
            }
        }
        else
        {
            if (inputActions.Player.GravitySwitch1.triggered)
            {
                IncrementGravityIndex(1);
            }
            else if (inputActions.Player.GravitySwitch2.triggered)
            {
                IncrementGravityIndex(-1);
            }
        }
        
        transform.rotation = Quaternion.RotateTowards(transform.rotation, Quaternion.LookRotation(forwardDirection, -gravity.direction), Time.deltaTime * gravityRotateSpeed);
    }

    private void FixedUpdate()
    {
        if (!IsOwner || !IsSpawned)
            return;

        if (!paused)
        {
            Vector2 moveInput = inputActions.Player.Move.ReadValue<Vector2>().normalized;
            Vector3 moveDirection = playerModel.forward * moveInput.y + playerModel.right * moveInput.x;
            Vector3 verticalVelocity = Vector3.Project(gravity.attachedRB.linearVelocity, gravity.direction);
            Vector3 horizontalVelocity = Vector3.ProjectOnPlane(moveDirection, gravity.direction).normalized * moveSpeed;
            gravity.attachedRB.linearVelocity = verticalVelocity + horizontalVelocity;

            if (isGrounded)
            {
                if (inputActions.Player.Jump.ReadValue<float>() > 0)
                {
                    gravity.attachedRB.linearVelocity -= gravity.direction * jumpVelocity;
                }
            }
            
            // Lean with movement
            playerModel.localEulerAngles = new Vector3(playerModel.localEulerAngles.x, Camera.main.transform.localEulerAngles.y, playerModel.localEulerAngles.z);
            Vector3 lean = new Vector3(moveInput.y * maxLeanAngle, Camera.main.transform.localEulerAngles.y, -moveInput.x * maxLeanAngle);
            playerModel.localRotation = Quaternion.RotateTowards(playerModel.localRotation, Quaternion.Euler(lean), leanSpeed * Time.fixedDeltaTime);
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (Vector3.Angle(collision.GetContact(0).normal, -gravity.direction) < 45f)
        {
            ground = collision.transform;
            isGrounded = true;
        }
    }

    private void OnCollisionExit(Collision collision)
    {
        if (collision.transform == ground)
        {
            ground = null;
            isGrounded = false;
        }
    }

    private void UpdatePlayer(string name, Color nameColor, Color bodyColor, string playerId) 
    {
        nameText.text = name;
        nameText.color = nameColor;
        bodyRenderer.material.color = bodyColor;
        headRenderer.material.color = new Color(1 - nameColor.r, 1 - nameColor.g, 1 - nameColor.b, nameColor.a);
        this.playerId = playerId;
    }

    [ServerRpc(RequireOwnership = false)]
    public void UpdatePlayerServerRpc(string name, Color nameColor, Color bodyColor, string playerId)
    {
        UpdatePlayer(name, nameColor, bodyColor, playerId);
        UpdatePlayerClientRpc(name, nameColor, bodyColor, playerId);
    }

    [ClientRpc(RequireOwnership = false)]
    public void UpdatePlayerClientRpc(string name, Color nameColor, Color bodyColor, string playerId)
    {
        UpdatePlayer(name, nameColor, bodyColor, playerId);
    }

    [ServerRpc]
    private void NewPlayerUpdateServerRpc()
    {
        if (IsServer)
        {
            Instance.UpdatePlayerClientRpc(LobbyManager.Instance.playerName, LobbyManager.Instance.playerNameColor, LobbyManager.Instance.playerColor, AuthenticationService.Instance.PlayerId);
            Instance.UpdateGravityClientRpc(Instance.gravityIndex);
        }
    }

    [ServerRpc]
    public void SwitchGravityServerRpc(int increment)
    {
        if (IsServer)
        {
            Instance.IncrementGravityIndex(increment);
        }
    }

    [ClientRpc]
    public void UpdateGravityClientRpc(int hostGravityIndex)
    {
        if (!IsServer && IsOwner)
        {
            SetGravityIndex((hostGravityIndex + indexOffset) % gravityDirections.Length);
        }
    }

    public void IncrementGravityIndex(int increment)
    {
        SetGravityIndex(gravityIndex + increment);
        if (IsServer && switchOthersOnGravityChange)
        {
            Instance.UpdateGravityClientRpc(gravityIndex);
        }
    }

    public void SetGravityIndex(int newGravityIndex)
    {
        gravityIndex = newGravityIndex;
        if (gravityIndex >= gravityDirections.Length)
        {
            gravityIndex = 0;
        }
        else if (gravityIndex < 0)
        {
            gravityIndex = gravityDirections.Length - 1;
        }
        gravity.direction = Instance.gravityDirections[gravityIndex];
        forwardDirection = Instance.forwardDirections[gravityIndex];
    }
}
